return(0)
}else{
return(1)
}
}
sig(2)
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2018-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov[1]
plot(ibov)
plot(ibov)
plot(ibov$ibov)
plot(ibov$ibov)
data.frame(ibov)
ibov =data.frame(ibov)
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov$ibov[i], col='red')
}
View(ibov)
plot(ibov)
plot(ibov)
View(ibov)
windows()
for(i in 1:length(ibov)){
plot(i, ibov$ibov[i], col='red')
}
length(ibov)
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov =data.frame(ibov)
windows()
for(i in 1:256{
plot(i, ibov$ibov[i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
plot(ibov)
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
plot(ibov)
plot(ibov[1:11])
windows()
for(i in 1:256{
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
#   periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1990-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
plot(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = data.frame(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
View(ibov)
ibov
ibov[1]
ibov[,1]
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i,], col='blue', pch=19)
}
0.9*6+0.8+1.25
7.45/6
version
print('olá')
import numpy as np
reticulate::repl_python()
import numpy as np
import numpy as np
import numpy as np
['oi]
['oi']
reticulateREPL()
def fx():
return x**2
def fx(x):
return x**2
fx(3)
fx(30)
import numpy as np
import numpy as np
View(fx)
View(fx)
install.packages(esqusser)
install.packages('esqusser')
install.packages('esquisse')
librarys('esquisse')
library('esquisse')
library(sf)
library(geobr)
library(ggplot2)
st = read_state(code_state = 'SP', year = 2010)
esquisser(st)
19.69*15+19.48*10
20.96*25-19.69*15+19.48*10
20.96*25 - 19.69*15+19.48*10
20.96*25
20.96*25 -( 19.69*15+19.48*10 )
21.02*25 - ( 19.69*15+19.48*10 )
install.packages("Rcpp")
library(Rcpp)
adicao_r <- function(x, y, z) {
sum = x + y + z
return(sum)
}
cppFunction(
"int adicao_c(int x, int y, int z) {
int sum = x + y + z;
return sum;
}")
adicao_c(3, 3, 4)
adicao_c(3.3, 3, 4)
adicao_c(3.3, 3.88, 4)
adicao_c(3.3, 3.88, 4)
adicao_c(3.3, 3.88, 4.77)
cppFunction(
"int adicao_c(double x, int y, int z) {
int sum = x + y + z;
return sum;
}")
adicao_c(3.3, 3.88, 4.77)
13.59-13.24
0.35*20
27*7
27*7*2*27
27*7*2+7
library(tidyverse)
library(dplyr)
library(rlang)
library(dplyr)
tb <- tibble(x = 1:4,
y = c(4, 7, 1, 3),
z = c(10, 10, 22, 22),
k = c(TRUE, FALSE, FALSE, TRUE),
u = c("A", "B", "A", "B"))
install.packages('rlang')
install.packages("rlang")
install.packages('rlang')
install.packages("rlang")
library(dplyr)
install.packages('tydeverse')
installr::uninstall.R("4.0.0", GUI = TRUE)
install.packages('tydeverse')
install.packages('tydeverse')
library(dplyr)
library(tidyverse)
remove.packages("tidyverse", lib="~/R/win-library/4.0")
install.packages('tydeverse')
install.packages("tidyverse", dependencies=T)
library(dplyr)
library('tydeverse')
library('tidyverse')
library("tidyverse")
install.packages("tidyverse", dependencies = TRUE, INSTALL_opts = '--no-lock')
library("tidyverse")
library(dplyr)
remove.packages("rlang", lib="~/R/win-library/4.0")
library("tidyverse")
install.packages('rlang')
install.packages("rlang")
install.packages('dplyr')
library("tidyverse")
tb <- tibble(x = 1:4,
y = c(4, 7, 1, 3),
z = c(10, 10, 22, 22),
k = c(TRUE, FALSE, FALSE, TRUE),
u = c("A", "B", "A", "B"))
tb
View(tb)
tb %>%
arrange(desc(z), -y)
tb %>%
arrange(desc(z), -y)
remotes::install_version("pillar", version = "1.4.4")
tb <- tibble(x = 1:4,
y = c(4, 7, 1, 3),
z = c(10, 10, 22, 22),
k = c(TRUE, FALSE, FALSE, TRUE),
u = c("A", "B", "A", "B"))
tb %>%
arrange(desc(z), -y)
remotes::install_github("tidyverse/tibble")
library("tidyverse")
tb <- tibble(x = 1:4,
y = c(4, 7, 1, 3),
z = c(10, 10, 22, 22),
k = c(TRUE, FALSE, FALSE, TRUE),
u = c("A", "B", "A", "B"))
tb %>%
arrange(desc(z), -y)
tb %>%
filter(x > 3 | z=='TRUE')
tb %>%
filter(x > 3 | U=='A')
tb %>%
filter(x > 3 | u=='A')
tb %>%
filter(x > 3 | u =="A")
tb %>%
arrange(desc(z), -y)
library("tidyverse")
library('dplyr')
tb %>%
arrange(desc(z), -y)
rlang::last_error()
tb %>%
arrange(desc(z), -y)
rlang::last_error()
fx = function(x){
x^2+ 3*x - 2
}
a = 0
b = 5
N = 10000
s = 0
solve = function(a, b, N, fx){
s = 0
for(i in 1:N){
x = runif(1, a, b)
f = fx(x)
s = s + f
}
return( s*(b-a)/N )
}
solve(0, 5, 100000, fx)
f2 = function(x){
log(x) + 2
}
solve(0, 10, 100000, f2)
f1 = function(x){
x^2+ 3*x - 2
}
solve(0, 5, 100000, f1)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
curve(f1, xlim = c(0, 5))
curve(f2, xlim=c(0, 10))
set.seed(2)
x = seq(-1, 1, length = 1000)
n = length(x)
beta2 = 6
beta_reg = c()
for (j in 1:1e6){
erro =  rnorm(n, 0, 1)
y = beta2*x + erro
reg = lm(y ~ x - 1)
beta_reg[j] = reg$coefficients[1]
}
for (j in 1:1e6){
erro =  rnorm(n, 0, 1)
y = beta2*x + erro
reg = lm(y ~ x - 1)
beta_reg[j] = reg$coefficients[1]
cat('Iteração', j)
}
y = beta2*x + erro
for (j in 1:1e6){
erro =  rnorm(n, 0, 1)
y = beta2*x + erro
reg = lm(y ~ x - 1)
beta_reg[j] = reg$coefficients[1]
cat('Iteração', j, '\n')
}
for (j in 1:1e4){
erro =  rnorm(n, 0, 1)
y = beta2*x + erro
reg = lm(y ~ x - 1)
beta_reg[j] = reg$coefficients[1]
cat('Iteração', j, '\n')
}
mean(beta_reg)
mean(beta_reg)
hist(beta_reg)
data = density(beta_reg)
reg = lm(y~x-1)
# plot
plot(data$x, length(data)*data$y, type = 'l', xlim = c(min(beta_reg), max(beta_reg)))
points(mean(beta_reg), 0, pch=19, col='red', cex=2)
points(reg$coefficients, 0, pch=19, col='blue', cex=2)
legend("topright", legend=c("beta médio","beta MQO"), col=c("red","blue"), lty=1,lwd=2)
reg = lm(y~x-1)
summary(reg)
# plot
plot(data$x, length(data)*data$y, type = 'l', xlim = c(min(beta_reg), max(beta_reg)))
points(mean(beta_reg), 0, pch=19, col='red', cex=2)
points(6, 0, pch=19, col='blue', cex=2)
legend("topright", legend=c("beta médio","beta MQO"), col=c("red","blue"), lty=1,lwd=2)
plot(data$x, length(data)*data$y, type = 'l', xlim = c(min(beta_reg), max(beta_reg)))
points(mean(beta_reg), 0, pch=19, col='red', cex=4)
points(6, 0, pch=19, col='blue', cex=2)
legend("topright", legend=c("beta médio","beta MQO"), col=c("red","blue"), lty=1,lwd=2)
for(i in 1:20000){
y = rnorm(1000, 0, 1)
x = rnorm(1000, 0, 1)
k = (x - mean(x)) / sum((x - mean(x))^2)
beta2_ols[i] = sum(k*y)
w = rnorm(1000, 0, 1)
beta2_alt[i] = sum(w*y)
cat('Iteração:', i, '\n')
}
beta2_ols = c()
beta2_alt = c()
for(i in 1:20000){
y = rnorm(1000, 0, 1)
x = rnorm(1000, 0, 1)
k = (x - mean(x)) / sum((x - mean(x))^2)
beta2_ols[i] = sum(k*y)
w = rnorm(1000, 0, 1)
beta2_alt[i] = sum(w*y)
cat('Iteração:', i, '\n')
}
par(mfrow=c(1, 2))
plot(density(beta2_ols), col='red', lty=2, lwd=2, main='Estimador de MQO')
abline(v=0, lty=2)
plot(density(beta2_alt), col='blue', lwd=2, main='Estimador Alternativo' )
abline(v=0, lty=2)
set.seed(10)
sd(beta2_alt)
sd(beta2_ols)
setwd('D:/Git projects/Econometry')   # definir o diretório
f1 = function(x){
x^2 + 3*x - 2
}
f1(1)
f1(4)
f1(40)
a = 0
b = 5
n = 1e4
solve = function(a, b, N, fx){
s = 0
for (i in 1:N) {
x = runif(1, a, b)
f = fx(x)
s = s + f
}
return(s*(b-a)/N)
}
solve(a, b, n, f1)
n
n = 20000
solve(a, b, n, f1)
solve(a, b, n, f1)
solve(a, b, n, f1)
n = 50000
solve(a, b, n, f1)
solve(a, b, n, f1)
solve(a, b, n, f1)
f2 = function(x){
log(x) + 2
}
solve(0, 10, n, f2)
par(mfrow=c(1, 2))
curve(f1, xlim = c(0, 5))
curve(f2, xlim = c(0, 10))
set.seed(2)
set.seed(2)
x = seq(-1, 1, length=1000)
n = length(x)
beta2 = 6
beta_reg = c()
for (j in 1:1e4) {
erro = rnorm(n, 0, 1)
y = beta2*x + erro
reg = lm(y ~ x - 1)
beta_reg[j] = reg$coefficients[1]
cat('Iterações:', j, '\n')
}
mean(beta_reg)
hist(beta_reg)
hist(beta_reg, col = 'lightblue', breaks = 25)
par(mfrow=c(1, 1))
hist(beta_reg, col = 'lightblue', breaks = 25)
summary(beta_reg)
beta2_ols = c()
beta2_alt = c()
set.seed(10)
for (i in 1:50000) {
y = rnorm(1000, 0, 1)
x = rnorm(1000, 0, 1)
k = (x - mean(x))/ sum((x-mean(x)) ^2)
beta2_ols[i] = sum(k*y)     # eq 2
w = rnorm(1000, 0, 1)
beta2_alt[j] = sum(w*y)
cat('Iterações:', i, '\n')
}
sd(beta2_alt)
for (i in 1:50000) {
y = rnorm(1000, 0, 1)
x = rnorm(1000, 0, 1)
k = (x - mean(x))/ sum((x-mean(x)) ^2)
beta2_ols[i] = sum(k*y)     # eq 2
w = rnorm(1000, 0, 1)
beta2_alt[i] = sum(w*y)
cat('Iterações:', i, '\n')
}
sd(beta2_alt)
sd(beta2_ols)
par(mfrow=c(1, 2))
plot(density(beta2_ols), col='red', lty=2, lwd=2, main='Estimador de MQO')
abline(v=0, lty=2)
plot(density(beta2_alt), col='blue', lwd=2, main='Estimador Alternativo')
abline(v=0, lty=2)
summary(beta2_alt)
summary(beta2_ols)
