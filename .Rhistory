}
norma = abs(r_l - r_h)
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
}
r_l
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma', norma, 'r_l', r_l)
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma', norma, 'r_l', r_l, '\n')
}
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma=', norma, ',r_l=', r_l, '\n')
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma=', norma, ',r_l=', r_l, '\n')
}
vec = c(1, 4, 5, 7, 1.2, 4.2, 9, NaN)
mean(vec)
mean(vec, na.rm = T)
mv = mean(vec, na.rm = T)
is.na(vec)
ifelse(vec == is.na(vec), mv, vec)
ifelse(vec == is.na(vec), vec, mv)
ifelse(vec == is.na(vec), mv, vec)
ifelse(is.na(vec)==T, mv, vec)
install.packages('wbstats')
df = wb(indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2016)
library(wbstats)
df = wb(indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2016)
haad(df)
head(df)
View(df)
names = c('ARG', 'BRA', 'CHN')
df[df$country==names]
df[df$country==names,]
df$country==names
df[df$country==names ]
df[,df$country==names]
names = c('Argentina', 'Brazil', 'China')
df[df$country==names, ]
df[df$country==names ]
df[df$country==names, ]
View(df)
df[df$country==names&date>1999, ]
df[df$country==names and date>1999, ]
df[df$country==names & date>1999, ]
df[df$country==names , ]
filt =  (df$country=='Argentina'|df$country== 'Brazil'|df$country == 'China')
df[df$country==filt , ]
filt =  c(df$country=='Argentina'|df$country== 'Brazil'|df$country == 'China')
df[df$country==filt , ]
filt =  data>1999 & (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
filt =  df$date>=1999 & (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
df[df$country==filt , ]
df[df$country==filt , ]
df[df$country==filt , ]
df[filt , ]
df2 = df[filt , ]
df2[df2$iso3c=='BRA', ]
plot(df2$date, df2[df2$iso3c=='BRA', ]$value )
plot(df2$date[df2$iso3c=='BRA', ], df2[df2$iso3c=='BRA', ]$value )
plot(df2[df2$iso3c=='BRA', ]$value )
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value )
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value, type = 'l' )
library(wbstats)
df = wb(indicator = 'BX.KLT.DINV.WD.GD.ZS', startdate = 2000, enddate = 2016)
filt =   (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
df2 = df[filt , ]
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value, type = 'l' )
library(ipeadatar)
embi = ipeadata(c('JPM366_EMBI366'))[,2:3]
colnames(embi) = c('date', 'embi')
plot(embi)
plot(embi, type='l')
fp = function(){
print('Olá mundo !')
}
fp
fp
fp
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
for(i in 1:10){
print('Olá mundo !')
}}
fp = function(x){
for(i in 1:x){
print('Olá mundo !')
}}
fp(10)
fx = function(x){
x^2
}
sig =  function(x){
if (x>0){
return(0)
}else{
return(1)
}
}
sig(0)
sig(2)
if (x>=0){
return(0)
}else{
return(1)
}
if (x=>0){
return(0)
}else{
return(1)
}
sig =  function(x){
if (x=>0){
return(0)
}else{
return(1)
}
}
sig =  function(x){
if (x>=0){
return(0)
}else{
return(1)
}
}
sig(2)
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2018-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov[1]
plot(ibov)
plot(ibov)
plot(ibov$ibov)
plot(ibov$ibov)
data.frame(ibov)
ibov =data.frame(ibov)
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov$ibov[i], col='red')
}
View(ibov)
plot(ibov)
plot(ibov)
View(ibov)
windows()
for(i in 1:length(ibov)){
plot(i, ibov$ibov[i], col='red')
}
length(ibov)
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov =data.frame(ibov)
windows()
for(i in 1:256{
plot(i, ibov$ibov[i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
plot(ibov)
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
plot(ibov)
plot(ibov[1:11])
windows()
for(i in 1:256{
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
#   periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1990-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
plot(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = data.frame(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
View(ibov)
ibov
ibov[1]
ibov[,1]
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i,], col='blue', pch=19)
}
0.9*6+0.8+1.25
7.45/6
version
print('olá')
import numpy as np
reticulate::repl_python()
import numpy as np
import numpy as np
import numpy as np
['oi]
['oi']
reticulateREPL()
def fx():
return x**2
def fx(x):
return x**2
fx(3)
fx(30)
import numpy as np
import numpy as np
View(fx)
View(fx)
install.packages(esqusser)
install.packages('esqusser')
install.packages('esquisse')
librarys('esquisse')
library('esquisse')
library(sf)
library(geobr)
library(ggplot2)
st = read_state(code_state = 'SP', year = 2010)
esquisser(st)
19.69*15+19.48*10
20.96*25-19.69*15+19.48*10
20.96*25 - 19.69*15+19.48*10
20.96*25
20.96*25 -( 19.69*15+19.48*10 )
21.02*25 - ( 19.69*15+19.48*10 )
library(readxl)
setwd('D:/Git projects/Econometry')   # definir o diretório
read_xlsx('data.xlsx')
read_xlsx('data.xlsx')
df = read_xlsx('data.xlsx')
View(df)
attach(df)
head(df)
head(df)
data.frame(df)
df = data.frame(df)
attach(df)
head(df)
lm(KM.L ~ KM.H + POT +PESO)
reg = lm(KM.L ~ KM.H + POT +PESO)
reg = lm(KM.L ~ KM.H + POT +PESO)
summary(reg)
anova(reg)
confint(reg)
reg$residuals
plot(reg$residuals)
plot(reg$fitted.values, reg$residuals)
plot(reg$fitted.values, reg$residuals, col='blue')
plot(reg$fitted.values, reg$residuals, col='blue', pch=19)
View(df)
indep = df[, 3:5]
vif(indep)
install.packages(faraway)
install.packages('faraway')
library(faraway)
vif(indep)
abline(h=0)
qqnorm(reg$residuals)
qqline(reg$residuals)
qqnorm(reg$residuals, col='blue')
qqnorm(reg$residuals, col='blue', pch=19)
qqline(reg$residuals)
qqnorm(reg$residuals, col='red', pch=19)
qqline(reg$residuals)
shapiro.test(reg$residuals)
hist(reg$residuals)
hist(reg$residuals, col='lightgreen')
library(lmtest)
bptest(reg)
lmrob(KM.L ~ KM.H + POT +PESO)
library(MASS)
lmrob(KM.L ~ KM.H + POT +PESO)
rlm(KM.L ~ KM.H + POT +PESO)
reg2 = rlm(KM.L ~ KM.H + POT +PESO)
summary(reg2)
library(estimatr)
install.packages(estimatr)
install.packages('estimatr')
library(estimatr)
reg2 = lm_robust(KM.L ~ KM.H + POT +PESO)
summary(reg2)
anova(reg)
library(optimx)
## dados
x = c(1, 2, 4, 8, 5, 4, 6, 8, 3, 1, 5, 6, 3, 1.1, 7, 0.9, 1, 3, 4, 7, 8)
y = c(0, 1, 3, 1, 3, 4, 6.6, 8, 1, 4.1, 6, 7, 4, 3.6, 5, 3, 1, 2, 2.2, 1, 5.7)
df = data.frame(y, x)
reg = lm(y~x)
# 2 (a)
n = length(x)
aa = sum((x-mean(x))*(y - mean(y)))
bb = sqrt(sum((x-mean(x))^2)*sum((y-mean(y))^2) )
c = aa/bb
cor(y, x)
# 2 (b)
beta = c(4, 5)
freg = function(beta, data){
with(data,  sum( (y - beta[1] - beta[2]*x )^2 )  )
}
freg(beta, df)
my_reg = optim(par = beta, fn = freg, data=df)
beta1 = my_reg$par[1]
beta2 = my_reg$par[2]
# 2 (c)
y_hat = beta1 + beta2*x
# erro
epsilon = y - y_hat
sig = sqrt( sum(epsilon^2) /  ( n - length(my_reg$par) ) )
ep_b2 = sig /  sqrt( sum( (x - mean(x))^2 ))
ep_b1 =  sig*sqrt( sum(x^2)/ (n*sum( (x - mean(x))^2 ) ) )
t_beta1 = (beta1 - 0)/ ep_b1
pt(t_beta1, length(x)-2, lower.tail = F)
curve(dt(x, length(x)), xlim = c(-5, 5), ylim = c(0, 0.45))
segments(t_beta1, 0, t_beta1, dt(t_beta1, length(x)))
t_beta2 = (beta2 - 0)/ ep_b2
pt(t_beta2, length(x)-2, lower.tail = F)
t_beta = qt(0.975, length(x)-2)
ic_beta1_L = beta1 - t_beta*ep_b1
ic_beta1_H = beta1 + t_beta*ep_b1
ic_beta2_L = beta2 - t_beta*ep_b2
ic_beta2_H = beta2 + t_beta*ep_b2
qt(0.975, 11)
sum(epsilon)
# 2 (g)
SQR = sum(epsilon^2)
SQE = sum( (y_hat - mean(y))^2 )
SQT = sum( (y - mean(y))^2 )   # SQR + SQE
anova(reg)
SQE
SQR
SQT
reg = lm(KM.L ~ KM.H + POT +PESO)
anova(reg)
SQE = sum(reg$fitted.values - mean(KM.L))
SQE
SQE = sum(reg$fitted.values - mean(KM.L)^2)
SQE
SQE = sum((reg$fitted.values - mean(KM.L)) ^2)
SQE
680.9+350.37+228.47
SQR = sum((reg$fitted.values - KM.L))
SQR
SQR = sum((reg$fitted.values - KM.L)^2)
SQR
SQT = SQR +SQT
anova(reg)
350.37/2.17
680.9/2.17
summary(reg)
anova(reg)
(680.9+350.37+228.47)/2.17
(680.9+350.37+228.47)/(3*2.17)
