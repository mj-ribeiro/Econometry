if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
c = 0
n = 10000
for(i in 1:n){
if(sample(v, 1)==0){
c = c + 1
print('cara')
}else{
print('coroa')
}
}
cat('A proporção de caras é:', c/n)
p_t0 = 1
for (i in 1:100) {
p_t1 = p_t0 + rnorm(1, 0, 1)
p_t0 = p_t1
}
plot(p_t1)
p_t1 =c()
p_t0 = 1
p_t1 =c()
for (i in 1:100) {
p_t1[i] = p_t0 + rnorm(1, 0, 1)
p_t0 = p_t1
}
plot(p_t1)
plot(p_t1, type='l')
curve(x^2)
curve(x^2, xlim=c(-5, 5))
fx = function(x){
x^2
}
curve(x^3, xlim=c(-5, 5))
curve(x^3 + 2, xlim=c(-5, 5))
curve(x^4, xlim=c(-5, 5))
curve(x^5, xlim=c(-5, 5))
curve(x^3, xlim=c(-5, 5))
fx = function(x){
x^3
}
r_l, r_h = -4, 4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
}
norma, tol = 1, 1e-6
r_l, r_h = -4, 4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
}
r_l
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma', norma, 'r_l', r_l)
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma', norma, 'r_l', r_l, '\n')
}
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma=', norma, ',r_l=', r_l, '\n')
}
norma= 1
tol = 1e-6
r_l = -4
r_h =  4
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)
cat('norma=', norma, ',r_l=', r_l, '\n')
}
vec = c(1, 4, 5, 7, 1.2, 4.2, 9, NaN)
mean(vec)
mean(vec, na.rm = T)
mv = mean(vec, na.rm = T)
is.na(vec)
ifelse(vec == is.na(vec), mv, vec)
ifelse(vec == is.na(vec), vec, mv)
ifelse(vec == is.na(vec), mv, vec)
ifelse(is.na(vec)==T, mv, vec)
install.packages('wbstats')
df = wb(indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2016)
library(wbstats)
df = wb(indicator = "NY.GDP.MKTP.CD", startdate = 2000, enddate = 2016)
haad(df)
head(df)
View(df)
names = c('ARG', 'BRA', 'CHN')
df[df$country==names]
df[df$country==names,]
df$country==names
df[df$country==names ]
df[,df$country==names]
names = c('Argentina', 'Brazil', 'China')
df[df$country==names, ]
df[df$country==names ]
df[df$country==names, ]
View(df)
df[df$country==names&date>1999, ]
df[df$country==names and date>1999, ]
df[df$country==names & date>1999, ]
df[df$country==names , ]
filt =  (df$country=='Argentina'|df$country== 'Brazil'|df$country == 'China')
df[df$country==filt , ]
filt =  c(df$country=='Argentina'|df$country== 'Brazil'|df$country == 'China')
df[df$country==filt , ]
filt =  data>1999 & (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
filt =  df$date>=1999 & (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
df[df$country==filt , ]
df[df$country==filt , ]
df[df$country==filt , ]
df[filt , ]
df2 = df[filt , ]
df2[df2$iso3c=='BRA', ]
plot(df2$date, df2[df2$iso3c=='BRA', ]$value )
plot(df2$date[df2$iso3c=='BRA', ], df2[df2$iso3c=='BRA', ]$value )
plot(df2[df2$iso3c=='BRA', ]$value )
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value )
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value, type = 'l' )
library(wbstats)
df = wb(indicator = 'BX.KLT.DINV.WD.GD.ZS', startdate = 2000, enddate = 2016)
filt =   (df$country=='Argentina'|df$country == 'Brazil'|df$country == 'China')
df2 = df[filt , ]
plot(seq(2000, 2016), df2[df2$iso3c=='BRA', ]$value, type = 'l' )
library(ipeadatar)
embi = ipeadata(c('JPM366_EMBI366'))[,2:3]
colnames(embi) = c('date', 'embi')
plot(embi)
plot(embi, type='l')
fp = function(){
print('Olá mundo !')
}
fp
fp
fp
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
print('Olá mundo !')
for(i in 1:10){
print('Olá mundo !')
}}
fp = function(x){
for(i in 1:x){
print('Olá mundo !')
}}
fp(10)
fx = function(x){
x^2
}
sig =  function(x){
if (x>0){
return(0)
}else{
return(1)
}
}
sig(0)
sig(2)
if (x>=0){
return(0)
}else{
return(1)
}
if (x=>0){
return(0)
}else{
return(1)
}
sig =  function(x){
if (x=>0){
return(0)
}else{
return(1)
}
}
sig =  function(x){
if (x>=0){
return(0)
}else{
return(1)
}
}
sig(2)
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2018-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i])
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov[1]
plot(ibov)
plot(ibov)
plot(ibov$ibov)
plot(ibov$ibov)
data.frame(ibov)
ibov =data.frame(ibov)
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov[i], col='red')
}
windows()
for(i in 1:length(ibov)){
plot(ibov$ibov[i], col='red')
}
View(ibov)
plot(ibov)
plot(ibov)
View(ibov)
windows()
for(i in 1:length(ibov)){
plot(i, ibov$ibov[i], col='red')
}
length(ibov)
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ibov =data.frame(ibov)
windows()
for(i in 1:256{
plot(i, ibov$ibov[i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
plot(ibov)
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
plot(ibov)
plot(ibov[1:11])
windows()
for(i in 1:256{
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256{
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='red')
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
#   periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1990-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
plot(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
ibov = data.frame(ibov)
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
View(ibov)
ibov
ibov[1]
ibov[,1]
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[,1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i], col='blue', pch=19)
}
windows()
for(i in 1:256){
plot(ibov[1:i,], col='blue', pch=19)
}
fx = function(x){
x^3 - x - 2
}
curve(fx(x), xlim=c(-5, 5))
abline(h=0)
setwd('D:/Git projects/Econometry')   # definir o diretório
norma= 1
tol = 1e-6
## definir o raiz low (r_l) e raiz high (r_h)
r_l = -4
r_h =  4
## solution usando o while
while (norma>tol) {
r_bar = 0.5*(r_h + r_l)
if(fx(r_bar)>0){
r_h = r_bar
} else{
r_l = r_bar
}
norma = abs(r_l - r_h)                 # o loop continua enquanto  abs(r_l - r_h)
# for maior que a tolerância
cat('norma=', norma, ',r_l=', r_l, '\n')
}
